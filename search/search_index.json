{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Market+","text":""},{"location":"#somethings-missing-check-back-soon","title":"Something's missing... check back soon.","text":"<p>Danger</p> <p>Callout test....</p>"},{"location":"api/methods/","title":"Methods","text":""},{"location":"api/methods/#user-prompts","title":"User Prompts","text":"<p>Currency Deprecation</p> <p>Some no-change methods may include a CurrencyType parameter, which has been deprecated by Roblox. It should not be used.</p>"},{"location":"api/methods/#promptgamepasspurchase","title":"PromptGamePassPurchase","text":"<p>Warning</p> <p>PromptGamePassPurchas has a third optional parameter which if provided will run once when the player either completes the purchase or closes out of the prompt. This parameter is only available on the server, is bad practice to process payments on the client anyways.</p> Parameter Type Required player Player \u2713 gamePassId number \u2713 handler (wasPurchased: boolean) -&gt; ()"},{"location":"api/methods/#usage","title":"Usage","text":"<pre><code>MarketPlus:PromptGamePassPurchase(player, 0, function(wasPurchased: boolean)\n    -- an optional server-only parameter, this function runs once when the\n    -- player either closes out the prompt or purchases the item\nend)\n</code></pre>"},{"location":"api/methods/#promptproductpruchase","title":"PromptProductPruchase","text":"<p>{no-change}</p>"},{"location":"api/methods/#parameters","title":"Parameters","text":"Note <p>PromptProductPurchase has a third parameter 'equipIfPurchased' which currently has no (known) functionality and was most likely and oversight by Roblox.</p> Parameter Type Required player Player \u2713 productId number \u2713 equipIfPurchased boolean currencyType CurrencyType"},{"location":"api/methods/#usage_1","title":"Usage","text":"<pre><code>MarketPlus:PromptProductPurchase(player, 3489239)\n</code></pre>"},{"location":"api/methods/#promptassetpurchase","title":"PromptAssetPurchase","text":"<p>{no-change}</p>"},{"location":"api/methods/#parameters_1","title":"Parameters","text":""},{"location":"api/methods/#usage_2","title":"Usage","text":"Parameter Type Required player Player \u2713 assetId number \u2713 equipIfPurchased boolean currencyType CurrencyType <pre><code>MarketPlus:PromptAssetPurchase(player, 4378233)\n</code></pre>"},{"location":"api/methods/#promptbundlepurchase","title":"PromptBundlePurchase","text":"<p>{no-change}</p>"},{"location":"api/methods/#parameters_2","title":"Parameters","text":"Parameter Type Required player Player \u2713 bundleId number \u2713"},{"location":"api/methods/#usage_3","title":"Usage","text":"<pre><code>MarketPlus:PromptBundlePurchase(player, 29311233)\n</code></pre>"},{"location":"api/methods/#promptpremiumpurchase","title":"PromptPremiumPurchase","text":"<p>{no-change}</p>"},{"location":"api/methods/#parameters_3","title":"Parameters","text":"Parameter Type Required player Player \u2713"},{"location":"api/methods/#usage_4","title":"Usage","text":"<pre><code>MarketPlus:PromptPremiumPurchase(player)\n</code></pre>"},{"location":"api/methods/#other","title":"Other","text":""},{"location":"api/methods/#bindhandlerfunctiontoproductpurchase","title":"BindHandlerFunctionToProductPurchase","text":"<p>{server-only}</p> <p>Tip</p> <p>It is important that you bind all your developer product purchase handlers before prompting users to make purchases, otherwise players may recive purchase errors.</p>"},{"location":"api/methods/#parameters_4","title":"Parameters","text":"Parameter Type Required productId number \u2713 handler (receiptInfo: table) -&gt; (ProductPurchaseDecision) \u2713"},{"location":"api/methods/#reciptinfo","title":"reciptInfo","text":"Value Type Note <code>PurchaseId</code> string A unique identifier for the specific purchase. <code>PlayerId</code> number The user ID of the player who made the purchase. <code>ProductId</code> number The ID of the purchased product. <code>PlaceIdWherePurchased</code> number The place ID in which the purchase was made; not necessarily the same as the current place's ID. <code>CurrencySpent</code> number The amount of currency spent in the transaction. <code>CurrencyType</code> CurrencyType The type of currency spent in the purchase; always CurrencyType.Robux."},{"location":"api/methods/#usage_5","title":"Usage","text":"<pre><code>MarketPlus:BindToProductPurchase(productId, function(receiptInfo: table)\n    -- code to run\n\n    -- must return a ProductPurchaseDecision enum\n    return Enum.ProductPurchaseDecision.PurchaseGranted -- or\n    return Enum.ProductPurchaseDecision.NotProcessedYet\nend)\n</code></pre>"},{"location":"home/examples/","title":"Examples","text":""},{"location":"home/examples/#script-examples","title":"Script Examples","text":""},{"location":"home/examples/#product-purchase","title":"Product Purchase","text":"<p>{script}</p> <p>This <code>Script</code> prompts a developer product purchase to any player that clicks a part in workspace, it also handles the purchase recipt and gives coins when a purchase is completed.</p> <pre><code>-- define our product configs\nlocal PRODUCT_ID: number = 0000000\nlocal COINS_TO_GIVE: number = 100\n\n-- define our services &amp; modules\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\nlocal MarketPlus = require(ReplicatedStorage:WaitForChild(\"MarketPlus\"))\n\n-- this script assumes the part and click detector are already in workspace\nlocal clickPart: Part = workspace:WaitForChild(\"ClickPart\")\nlocal clickDetector: ClickDetector = clickPart:WaitForChild(\"ClickDetector\")\n\n-- connect the ClickDetector\nclickDetector.MouseClick:Connect(function(playerWhoClicked: Player)\n    -- prompt with MarketPlus\n    MarketPlus:PromptProductPurchase(playerWhoClicked, PRODUCT_ID)\nend)\n\n-- setup our bind for the product\nMarketPlus:BindHandlerFunctionToProductPurchase(PRODUCT_ID, function(receiptInfo: table)\n    local playerWhoPurchased: Player? = Players:GetPlayerByUserId(receiptInfo.PlayerId)\n\n    if playerWhoPurchased then\n        -- the player is in the game\n        local leaderStats: Folder = playerWhoPurchased:WaitForChild(\"leaderstats\")\n        local playerCoinsValue: NumberValue = leaderStats:WaitForChild(\"Coins\")\n\n        -- give the coins\n        playerCoinsValue.Value += COINS_TO_GIVE\n\n        -- return that the purchase was successful\n        return Enum.ProductPurchaseDecision.PurchaseGranted\n    end\n\n    -- the player wasnt in the game\n    return Enum.ProductPurchaseDecision.NotProcessedYet\nend)\n</code></pre>"},{"location":"home/examples/#client-processor","title":"Client Processor","text":"<p>{local-script}</p>"}]}